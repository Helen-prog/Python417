DOM - Document Object Model


nodeValue - значение ноды
nodeName - имя ноды
nodeType - тип ноды

AnyDesk

file:///E:/Python417/js/test.py?

file:///E:/Python417/js/index.html?#test.py

file:///E:/Python417/js/index.html?name1=Igor#test.py
file:///E:/Python417/js/index.html?name1=Olga#test.py
file:///E:/Python417/js/index.html?name1=Igor&psw=123456#test.py
file:///E:/Python417/js/index.html#test.py

file:///E:/Python417/js/index.html?login=admin&password1=123456&password2=123#text.py
file:///E:/Python417/js/index.html?login=igor&password1=qwerty&password2=qwe#text.py

0-9A-F

JSON

DOM (Browser Object Model) - Объектная модель Браузера


Win + R -> cmd

python
py


print("Hello")

1.py

print("Hello, Python")

cmd

python 1.py

IDLE

Типы данных:
int - целочисленные значения
float - вещественные числа
str - строковое значение
bool - булевый тип (True, False)


False => "", 0, 0.0, False, None

1) от 0 по 9
2) 
ворона - 1
вороны - 2, 3, 4
ворон - 5, 6, 7, 8, 9, 0

копейка - 1, 21, 31, 91
копейки - 2, 22, 32, 82
копеек - 5, 55, 75, 95

Исключение: 11, , ,

Типы данных:
 - Неизменяемые:
	- str
	- int
	- float
	- bool
	- tuple
	- frozenset
 - Изменяемые:
    - list
	- set {1,2,3}
	- dict {1:1,2:2,3:3}
	
	
https://git-scm.com/


git --version
- просмотр версии


git init
- инициализация репозитория (только один раз)

git status
- показывает состояние репозитория

git add -A
		-all
		main.py
		.
- добавляем файлы в репозиторий отслежуемые git

git config --global user.name
- просмотр имени в системе

git config --global user.name "new_user"
		   --local
	
git config --global user.email

git config --global user.email "test@mail.ru"


git commit -m "first commit"
- создание контрольной точки


.gitignore

git commit -m "git ignore"

git branch
- просмотр веток

git branch test
- создание ветки

git branch -D test
- удаление ветки


git branch readme

git checkout readme
- переход на ветку

readme.md

git checkout master


master    ->     readme
  main.py           main.py
                    readme.md		

git merge readme
- совмещение веток					

git branch -D readme

git log
- история коммитов

токен

Win + R => control

Диспечер учетных данных


https://github.com
Helen-prog
токен

git remote add origin https://github.com/Helen-prog/Python417.git
git push -u origin master

95344b8f58b7c850351cde6b6e985bfb97f6aaef

0) git status
1) git add .
2) git commit -m "change main"
3) git push
- отправляем изменения с локального репозитория на удаленный 

git clone https://github.com/Helen-prog/Python417.git

git pull
- забирает изменения с удаленного репозитория на локальный

class NameClass:
	свойства (переменные, поля)
		- статические
		- динамические
	методы (функции)
		- статические () @staticmethod
		- экземпляра класса (self)
		- класса (cls) @classmethod
	
	атрибуты = свойства + методы
	
	
Модификаторы доступа:
public  ->  self.x
protected  -> self._x
private  -> self.__x

5! = 1 * 2 * 3 * 4 * 5
7! = 1 * 2 * 3 * 4 * 5 * 6 * 7

родительский (суперкласс, базовый класс)
дочерний (подкласс, производный класс)

DRY (Don`t Repeat Youself) - не повторяйся

geometry  => pip => math
	rect.py
	sq.py
	trian.py

import sys
sys.path

Упаковка данных - сериализация
Распаковка данных - десериализация

1. marshal (*.pyc)
2. pickle
3. json

dump() - сохраняет данные в открытый файлы
load() - счтывает данные из открытого файла

dumps() - сохранение данных в строку
loads() - считывание данных из строки

pip install requests


CSV (Comma Separated Value) - переменные, 
	разделенные запятыми


data.csv


Имя,Професся,Год рождения
Виктор,Веб-дизайнер,1995
Игорь,Программист,1983

Имя;Професся;Год рождения
Виктор;Веб-дизайнер;1995
Игорь;Программист;1983

csv.reader => []
csv.DictReader  => {}

csv.writer => []
csv.DictWriter  => {}

pip install beautifulsoup4 или bs4

lxml

https://ru.wordpress.org/plugins/browse/blocks/page/1/
https://ru.wordpress.org/plugins/browse/blocks/page/2/
https://ru.wordpress.org/plugins/browse/blocks/page/3/

https://ru.wordpress.org/plugins/browse/blocks/page/22/

parser.py

Компоненты MVC:
• Модель (Model) — этот компонент отвечает за данные, а также 
определяет структуру приложения. 
• Представление (View) — этот компонент отвечает за 
взаимодействие с пользователем. То есть код компонента 
view определяет внешний вид приложения.
• Контроллер (Controller) — этот компонент отвечает за связь между model и view. По сути, это мозг MVC-приложения.

articles
	- project_articles.py
	- controller.py
	- model.py
	- view.py
	
	
dict_article = {
            "название": "qqq",
            "автор": "www",
            "количество страниц": "7",
            "описание": "eee"
        }
		
	Article("qqq", "www", "7", "eee")	
	
self.articles = {
	"qqq": {   
			title: "qqq",
			author: "www",
			pages: "7",
			description: "eee"
	},  # экземпляр класса Article
	"aaa": {   
			title: "aaa",
			author: "sss",
			pages: "5",
			description: "ddd"
	}
}

templates
	index.html
	blog.html
	
	
*.db, *.sqlite

SELECT [ALL | DISTINCT] * | столбец1 [, столбец2]
FROM таблица1 [, таблица2]
WHERE условие
	операторы сравнения (=, <>, !=, >, >=, <, <=)
	AND, OR
	поле [NOT] BETWEEN начальное_значение AND конечное_значение
	поле [NOT] LIKE шаблон_строки:
		% - любое количество символов
		_ - один любой символов
	поле [NOT] GLOB регулярное_выражение
		* - любое количество символов
		. - один любой символов
		[символы] - любой одиночный символ из перечисленных
		[A-Za-z0-9] - любой одиночный символ из диапазона
		[^0-9] - все, кроме заданного диапазона символов
	поле IS [NOT] NULL
	поле IS [NOT] значение
	поле [NOT] IN (набор_значений | выражение)
GROUP BY (группировать по)
HAVING (условие)
ORDER BY col_name | col_number [ASC | DESC]
LIMIT кол-во_строк [OFFSET смещение]
	LIMIT [смещение, ] кол-во_строк


INSERT INTO имя_таблицы [(столбец1, ...)]
VALUES (набор_значений)

	
INSERT INTO имя_таблицы [(столбец1, ...)]
SELECT список столбцов
FROM список таблица1
WHERE условие


UPDATE имя_таблицы
SET поля=значение
WHERE условие


DELETE FROM имя_таблицы
WHERE условие


CRUD

Логическая база данных
Физическая база данных

Декартовое произведение - все возможные комбинации каждой строки 
	одной таблицы с каждой строкой другой таблицы
	
	
Функции агрегирования
SUM  только с числами
AVG  только с числами
COUNT
MIN
MAX

ON DELETE или ON UPDATE
- CASCADE - автоматически удаляются или изменяются
	строки в зависимой таблице
- SET NULL - установится NULL
- RESTRICT - запрет на удаление записи из главной
	таблицы, пока есть связанные записи
- SET DEFAULT - устанавливается значение по 	
	умолчанию


CREATE TABLE IF NOT EXISTS association(
     group_id INTEGER,
     lesson_id INTEGER,
     PRIMARY KEY (group_id, lesson_id)
     FOREIGN KEY (group_id) REFERENCES groups(id)
     FOREIGN KEY (lesson_id) REFERENCES lessons(id)	
		
		
Подзапросы

- однострочные (>, <, >=, <=, =, <>, !=)
- многострочные (IN, NOT IN)

	
EXISTS (существует)	
	
UNION, UNION ALL

SELECT список_столбцов
FROM таблица1 [INNER] JOIN таблица2 ON связь_таблиц
     [INNER] JOIN таблица3 ON связь_таблиц
	 
	 
SELECT c.cname, o.onum
FROM Customers c INNER JOIN Orders o
ON c.snum=o.snum
ORDER BY c.cname

ORM (Object-Relation Mapping)

SQLAlchemy

pip install sqlalchemy

models
	__init__.py
	database.py
	student.py
	group.py
	lesson.py



pip install jinja2

# макроопределение (аналог функции)
{% macro имя(агументы) %}

{% endmacro %}

имя(параметры)

templates	
	home.html
	header.html
	footer.html
	dialog.html
	
	page.html
	about.html
	
pip install faker

Flask
Django

pip install Flask

http://127.0.0.1:5000/

static
	css
		style.css
templates
	index.html
	about.html
	base.html
	
	

http://127.0.0.1:5000/profile/1	
http://127.0.0.1:5000/profile/2	

int - должны присутствовать только цифры
float - можно записать число с плавающей точкой
path - можно использовать любые допустимые символу URL плюс символ "/"
	
	

flash()

get_flashed_messages()

import os
os.urandom(20).hex()

from two.site_db import create_db
create_db()

http://127.0.0.1:5000/post/1

pip install flask-sqlalchemy


pip install django

first
cd first

django-admin startproject password_generator_project
- создать новый проект

cd password_generator_project

python manage.py runserver
- запустить сервер

Ctrl + C
- остановить сервер

python manage.py startapp generator
- создание нового приложения

http://127.0.0.1:8000/
http://127.0.0.1:8000/password/?length=2
http://127.0.0.1:8000/password/?length=12&numbers=on

cd first
cd password_generator_project
python manage.py runserver

cd first/password_generator_project
python manage.py runserver

python manage.py collectstatic

cd ../..

second
cd second
django-admin startproject personal_portfolio


cd personal_portfolio

python manage.py startapp skills
python manage.py startapp blog

pip install Pillow

python manage.py makemigrations
python manage.py migrate

python manage.py createsuperuser
- создать суперпользователя

http://127.0.0.1:8000/admin

http://127.0.0.1:8000/blog


cd ../..

third
cd third
django-admin startproject todos
cd todos
python manage.py startapp todo


python manage.py migrate

python manage.py createsuperuser

http://127.0.0.1:8000/signup/
http://127.0.0.1:8000/current/

46CcpEp4TgjAc4aMTBIwGZd16FDqa0msyZPf8SBzjtWToN7qcNofYS31OBgI3Zvg
oikTeYd3uaDRqyvw0zpijeJEGRbD5mDYSbxWXcpyUngaChsajL51B7zEoNOVYlMM



<div class="center">
 <h1>Система для обслуживания клиентов</h1>
 <p>Развивайте свой бизнес с помощью продвинутой, но простой
в использовании платформы Upservice</p>
 <h2>Для чего нужен Upservice</h2>
 <p>Upservice – это платформа для контроля и управления вашим
бизнесом.</p>
 <p>Помогает находить слабые стороны в работе сотрудников и
улучшать уровень обслуживания клиентов.</p>
</div>

models.CASCADE - если пользователь будет удален, то удалятся все задачи
models.PROTECT - запрещает удалять пользователя, пока у него есть задачи
models.SET_NULL - задачи останутся в БД, даже при удалении пользователя, но значение в поле задачи изменится на NULL
models.SET_DEFAULT - задачи останутся в БД, даже при удалении пользователя, но значение в поле задачи изменится на значение по умолчанию

ForeignKey - для связи один ко многим
ManyToManyField - для связи многие ко многим
OneToOneField - для связи один к одному



fouth
cd fouth
django-admin startproject devsearch

cd devsearch
python manage.py startapp projects
python manage.py startapp users


python manage.py shell

from projects.models import Project

Project.objects.all()
Project.objects.get(id=1)
Project.objects.filter(id=1)
Project.objects.filter(title__startswith="Website")
Project.objects.filter(title__contains="website")
Project.objects.filter(vote_total__gt=37)
Project.objects.filter(vote_total__gte=37)
Project.objects.exclude(vote_total__gte=37)

quit()


https://www.freelancer.com/portfolio-items/315324-website-for-picture-print-shop

forms.py

8ff47d0c664b62f73fcaf4529795f9f539bcafd2

utils.py

http://127.0.0.1:8000/projects/?search_query=web

http://127.0.0.1:8000/projects/?page=2

paginator.html

Ctrl + R
- поиск и замена

projects
queryset

http://127.0.0.1:8000/projects/?search_query=web
http://127.0.0.1:8000/projects/?page=2

http://127.0.0.1:8000/projects/?search_query=web&page=2

http://127.0.0.1:8000/projects/?search_query=web&page=2
http://127.0.0.1:8000/projects/?search_query=web&page=3


fifth
cd fifth
django-admin startproject programming_blog

cd programming_blog
python manage.py startapp blog

https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B3%D0%BB%D0%B0%D0%B2%D0%BD%D0%B0%D1%8F_%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86%D0%B0

str - любая не пустая строка, исключается символ "/"
int - любое положительное число, включая "0"
slug - слаг, ASCII символы (латиница), символы дифиса и подчеркивания
uuid - цифры, малые латинские символы, дефис
path - любая не пустая строка, включается символ "/"


templatetags
	__init__.py
	blog_tags.py
	

Mixins

utils.py

python manage.py collectstatic


git clone https://github.com/Helen-prog/blog.git

ls
- просмотр каталога

pwd
- путь к каталогу

mkvirtualenv --python=/usr/bin/python3.13 blogvenv
mkvirtualenv --python=/usr/bin/python3.9 blogvenv

deactivate
- выход из виртуального окружения

workon blogvenv
- для повторного входа


pip install django
pip install pillow
pip install django-simple-captcha
pip install django-ckeditor


/home/HelenKozovyakina/blog
/home/HelenKozovyakina/blog/static
/home/HelenKozovyakina/blog/media

https://helenkozovyakina.pythonanywhere.com/

django-admin startproject landing_page

python manage.py startapp cms
python manage.py startapp price
python manage.py startapp crm
python manage.py startapp telebot


cms
	base.html
	carusel.html
	index.html
	
@BotFather

Название:
Бот обработчик заявок с сайта

NikName(id)
ttest_Bot_Send_Message_Bot

token:
8422458304:AAEmqtKQoAbCR_KEKO-qUOb66IMYBTx1dLc

Your group Chat ID :
-4989348357

https://api.telegram.org/bot8422458304:AAEmqtKQoAbCR_KEKO-qUOb66IMYBTx1dLc/sendMessage?chat_id=-4989348357&text=Тест

Группа:
Заявки с сайта

@get_id_bot

/my_id@get_id_bot


django-admin startproject shop

python manage.py startapp products